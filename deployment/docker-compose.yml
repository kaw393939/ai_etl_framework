version: '3.8'

services:
  extractor:
    build:
      context: ../
      dockerfile: deployment/images/extractor/Dockerfile
    ports:
      - "8000:8000"
    environment:
      # FastAPI-specific environment variables
      APP_TITLE: "ETL Extractor Service"
      APP_DESCRIPTION: "Service to process data for the ETL pipeline."
      APP_VERSION: "1.0.0"
      APP_HOST: "0.0.0.0"
      APP_PORT: 8000
      max_workers: "${MAX_CONCURRENT_TASKS}"
      api_key: "${GROQ_API_KEY}"
    depends_on:
      - prometheus
      - cadvisor          # Ensure Extractor starts after Prometheus and cAdvisor
    networks:
      - etl_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 20s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  minio:
    build:
      context: ./images/minio
      dockerfile: Dockerfile    
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
      MINIO_PROMETHEUS_AUTH_TYPE: public
      MINIO_PROMETHEUS_URL: http://prometheus:9090
    command: server --console-address ":9001" /data
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - etl_network

  prometheus:
    build:
      context: ./images/prometheus
      dockerfile: Dockerfile
    ports:
      - "9090:9090"
    volumes:
      - prometheus_data:/prometheus
      - ./images/prometheus/config:/etc/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - etl_network

  grafana:
    build:
      context: ./images/grafana
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_DASHBOARDS_MIN_REFRESH_INTERVAL: "5s"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./images/grafana/config/provisioning:/etc/grafana/provisioning
      - ./images/grafana/config/dashboards:/etc/grafana/dashboards
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - etl_network

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - etl_network
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - etl_network
    restart: unless-stopped

volumes:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  etl_network:
    driver: bridge
